{"version":3,"sources":["../../server/controllers/product.js"],"names":["router","express","Router","get","req","res","Product","find","query","populate","products","status","send","data","isObjectId","findById","params","id","product","error","post","body","validationError","validateSync","errors","save","saved","put","patch","field","value","filed","val","attr","currentValue","specification","markModified","Array","testProduct","insertMany","delete","remove","message","deleteMany","_id","$in","deleted","deletedCount","length","process","env","NODE_ENV","module","exports"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport _assignIn from 'lodash/assignIn'\r\nimport _find from 'lodash/find'\r\nimport _isUndefined from 'lodash/isUndefined'\r\nimport _forEach from 'lodash/forEach'\r\nimport _isArray from 'lodash/isArray'\r\n\r\nimport Product from '../models/Product'\r\nimport wrap from '../middlewares/wrap'\r\nimport { isObjectId } from '../middlewares/validators'\r\n\r\nconst router = express.Router()\r\n\r\n\r\nrouter.get('/product/list/', wrap(async (req, res) => {\r\n    const products = await Product.find(req.query).populate('company')\r\n    res.status(200).send({ data: products })\r\n}))\r\n\r\n\r\nrouter.get('/product/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const product = await Product.findById(req.params.id).populate('company')\r\n    if (!product) return res.status(400).send({ error: `Product Not Found` })\r\n    res.status(200).send({ data: product })\r\n}))\r\n\r\n\r\nrouter.post('/product/', wrap(async (req, res) => {\r\n    const product = new Product({ ...req.body })\r\n\r\n    const validationError = product.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await product.save()\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.put('/product/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const product = await Product.findById(req.params.id)\r\n    if (!product) return res.status(400).send({ error: `Product Not Found` })\r\n\r\n    _assignIn(product, req.body)\r\n\r\n    const validationError = product.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await product.save()\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n *  @param {string}  field Field you want to change\r\n *  @param {string|number|object}  value New value\r\n * Note: If you want to change a specification, provide an object like {attr1:val1, attr2:val2}\r\n *       If the attr and the value match the existent attr and val, this attr will be removed\r\n *       If the attr matches but its the value differs, the attr value will be changed\r\n *       Company field can't be changed\r\n */\r\nrouter.patch('/product/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const { field, value } = req.body\r\n\r\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\r\n\r\n    const product = await Product.findById(req.params.id)\r\n    if (!product) return res.status(400).send({ error: `Product Not Found` })\r\n\r\n    if (_isUndefined(product[field])) return res.status(400).send({ error: `Inexistent field provided: ${field}` })\r\n    if (filed === 'company') return res.status(400).send({ error: `Company can't be changed` })\r\n\r\n    if (typeof product[field] !== 'object') {\r\n        product[field] = value\r\n    } else {\r\n        if (typeof value !== 'object') return res.status(400).send({ error: `Field type and provided value type must match` })\r\n\r\n        _forEach(value, (val, attr) => {\r\n            const currentValue = product.specification[attr]\r\n\r\n            if (currentValue && currentValue === val) delete product.specification[attr]\r\n            else if (currentValue && currentValue !== val) product.specification[attr] = val\r\n            else product.specification[attr] = val\r\n        })\r\n\r\n        product.markModified('specification')\r\n    }\r\n\r\n    const validationError = product.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await product.save()\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\n/**\r\n * Method to import bunch of company's products\r\n * Requst body must be like:\r\n * @param {array} products An array with Product objects to import\r\n * Note: Each objtct in array must match Product Schema\r\n *       Only first object is going to be validated due to performance reasons, so be careful what you put here!\r\n *       All not required fields may be saved in 'specification' field like {{attr1: val1}, {attr2: val2}}\r\n */\r\nrouter.post('/product/import', wrap(async (req, res) => {\r\n    const { products } = req.body\r\n\r\n    if (!products || products instanceof Array === false || typeof products[0] !== 'object')\r\n        return res.status(400).send({ error: `Imported data must be an array with objects` })\r\n\r\n    const testProduct = new Product({ ...products[0] })\r\n    const validationError = testProduct.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await Product.insertMany(products)\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.delete('/product/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const product = await Product.findById(req.params.id)\r\n    if (!product) return res.status(400).send({ error: `Product Not Found` })\r\n\r\n    await product.remove()\r\n    res.status(200).send({ message: `Product was deleted` })\r\n}))\r\n\r\n\r\nrouter.post('/product/batchDelete', wrap(async (req, res) => {\r\n    if (!_isArray(req.body)) return res.status(400).send({ error: `Body must be an array` })\r\n\r\n    const deleted = await Product.deleteMany({ _id: { $in: req.body } })\r\n    if (deleted.deletedCount === req.body.length) {\r\n        res.status(200).send({ message: `Products were deleted` })\r\n    } else {\r\n        res.status(500).send({ message: `Something went wrong while deleting` })\r\n    }\r\n}))\r\n\r\n\r\n/**\r\n * Adding an opportunity to clear a collection for non-production environment\r\n */\r\nprocess.env.NODE_ENV !== 'prod' && router.delete('/product/clear', wrap(async (req, res) => {\r\n    await Product.deleteMany()\r\n\r\n    const products = await Product.find()\r\n    if (products.length) return res.status(500).send({ error: `Due to unknown reason products weren't deleted` })\r\n\r\n    res.status(200).send({ message: 'Products were deleted' })\r\n}))\r\n\r\n\r\nmodule.exports = router"],"file":"product.js"}