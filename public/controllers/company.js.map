{"version":3,"sources":["../../server/controllers/company.js"],"names":["ObjectId","require","Types","router","express","Router","get","req","res","Company","find","query","populate","companies","status","send","data","isObjectId","findById","params","id","company","error","process","env","NODE_ENV","post","body","validationError","validateSync","errors","save","saved","patch","field","value","index","indexOf","push","pull","subdoc","requests","consultant","message","_id","populated","approved","request","Consultant","findOneAndUpdate","$set","new","consultants","importConfig","delete","remove","deleteMany","length","module","exports"],"mappings":"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","sourcesContent":["import express from 'express'\nimport _assignIn from 'lodash/assignIn'\nimport _isUndefined from 'lodash/isUndefined'\nimport _find from 'lodash/find'\n\nimport Company from '../models/Company'\nimport Consultant from '../models/Consultant'\n\n\nimport wrap from '../middlewares/wrap'\nimport { isObjectId } from '../middlewares/validators'\n\nconst ObjectId = require('mongoose').Types.ObjectId\nconst router = express.Router()\n\n\nrouter.get('/company/list/', wrap(async (req, res) => {\n    const companies = await Company.find(req.query).populate('certificates')\n\n    res.status(200).send({ data: companies })\n}))\n\n\nrouter.get('/company/list/:id', isObjectId, wrap(async (req, res) => {\n    const company = await Company.findById(req.params.id)\n        .populate('certificates')\n        .populate('requests.consultant')\n\n    if (!company) return res.status(400).send({ error: `Company Not Found` })\n\n\n    res.status(200).send({ data: company })\n}))\n\n\n/**\n * In production, companies must be created directly in database by platform administrator\n */\nprocess.env.NODE_ENV !== 'production' && router.post('/company/', wrap(async (req, res) => {\n    const company = new Company({ ...req.body })\n\n    const validationError = company.validateSync()\n    if (validationError) return res.status(400).send({ error: validationError.errors })\n\n    const saved = await company.save()\n    res.status(201).send({ data: saved })\n}))\n\n\n/**\n * Request body must be like:\n *  @param {string}  field Field you want to change\n *  @param {string|object}  value New value\n * Note: If the value is already in an array, it will be removed\n *       Request field value must match the Requst Schema (submodel)\n */\nrouter.patch('/company/list/:id', isObjectId, wrap(async (req, res) => {\n    const { field, value } = req.body\n\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\n\n    const company = await Company.findById(req.params.id)\n    if (!company) return res.status(400).send({ error: `Company Not Found` })\n\n    if (field === 'secret') return res.status(400).send({ error: `Secret can be changed manually only. Please contact platform administrator` })\n    if (_isUndefined(company[field])) return res.status(400).send({ error: `Inexistent field provided: ${field}` })\n\n    if (typeof company[field] !== 'object') {\n        company[field] = value\n    } else if (field !== 'requests') {\n        const index = company[field].indexOf(value)\n        index === -1 ? company[field].push(value) : company[field].pull(value)\n    } else {\n        if (typeof value !== 'object') return res.status(400).send({ error: `Field type and provided value type must match` })\n        const subdoc = _find(company.requests, { consultant: value.consultant, message: value.message })\n        subdoc && subdoc._id ? company.requests.pull(subdoc._id) : company.requests.push(value)\n    }\n\n    const validationError = company.validateSync()\n    if (validationError) return res.status(400).send({ error: validationError.errors })\n\n    const saved = await company.save()\n    const populated = await Company.populate(saved, 'certificates')\n    res.status(200).send({ data: populated })\n}))\n\n\n/**\n * Method to approve or reject consultants request\n * Request body must be like:\n *  @param {boolean} approved Has consultants been request approved or not?\n *  @param {object}  request  Object of Request {consultant, message}\n */\nrouter.patch('/company/list/:id/request', isObjectId, wrap(async (req, res) => {\n    const { approved, request } = req.body\n\n    if (!request || typeof request !== 'object') return res.status(400).send({ error: `Request must be an object type` })\n\n    const company = await Company.findById(req.params.id)\n    if (!company) return res.status(400).send({ error: `Company Not Found` })\n\n    const { _id, consultant } = _find(company.requests, { consultant: ObjectId(request.consultant._id), message: request.message })\n\n    company.requests.pull(_id)\n\n    if (approved) {\n        await Consultant.findOneAndUpdate({ _id: consultant }, { $set: { company: company._id } }, { new: true })\n        company.consultants.push(consultant)\n    }\n\n    const saved = await company.save()\n    return res.status(200).send({ data: saved })\n}))\n\n\nrouter.patch('/company/list/:id/importConfig', isObjectId, wrap(async (req, res) => {\n\n    const company = await Company.findById(req.params.id)\n    if (!company) return res.status(400).send({ error: `Company Not Found` })\n\n    company.importConfig = req.body.importConfig\n\n    const validationError = company.importConfig.validateSync()\n    if (validationError) return res.status(400).send({ error: validationError.errors })\n\n    const saved = await company.save()\n    return res.status(200).send({ data: saved })\n}))\n\n\nrouter.delete('/company/list/:id', isObjectId, wrap(async (req, res) => {\n    const company = await Company.findById(req.params.id)\n    if (!company) return res.status(400).send({ error: `Company Not Found` })\n\n    await company.remove()\n    res.status(200).send({ message: `Company deleted` })\n}))\n\n\n/**\n * Providing an opportunity to clear a collection for non-production environment\n */\nprocess.env.NODE_ENV !== 'production' && router.delete('/company/clear', wrap(async (req, res) => {\n    await Company.deleteMany()\n\n    const companies = await Company.find()\n    if (companies.length) return res.status(500).send({ error: `Due to unknown reason companies weren't deleted` })\n\n    res.status(200).send({ message: 'Companies were deleted' })\n}))\n\n\nmodule.exports = router"],"file":"company.js"}