{"version":3,"sources":["../../server/controllers/order.js"],"names":["router","express","Router","get","req","res","Order","find","query","orders","status","send","data","isObjectId","findById","params","id","order","error","post","body","invalid","validateSync","save","saved","module","exports"],"mappings":";;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAGAF,MAAM,CAACG,GAAP,CAAW,cAAX,EAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPC,eAAMC,IAAN,CAAWH,GAAG,CAACI,KAAf,CADO;;AAAA;AACtBC,YAAAA,MADsB;AAE5BJ,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEH;AAAR,aAArB;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAA3B;AAMAT,MAAM,CAACG,GAAP,CAAW,iBAAX,EAA8BU,sBAA9B,EAA0C;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvBC,eAAMQ,QAAN,CAAeV,GAAG,CAACW,MAAJ,CAAWC,EAA1B,CADuB;;AAAA;AACrCC,YAAAA,KADqC;;AAAA,gBAEtCA,KAFsC;AAAA;AAAA;AAAA;;AAAA,8CAExBZ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,cAAAA,KAAK;AAAP,aAArB,CAFwB;;AAAA;AAG3Cb,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEK;AAAR,aAArB;;AAH2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAA1C;AAOAjB,MAAM,CAACmB,IAAP,CAAY,SAAZ,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBY,YAAAA,KADkB,GACV,IAAIX,cAAJ,mBAAeF,GAAG,CAACgB,IAAnB,EADU;AAGlBC,YAAAA,OAHkB,GAGRJ,KAAK,CAACK,YAAN,EAHQ;;AAAA,iBAIpBD,OAJoB;AAAA;AAAA;AAAA;;AAAA,8CAIJhB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,cAAAA,KAAK,EAAEG;AAAT,aAArB,CAJI;;AAAA;AAAA;AAAA,mBAMJJ,KAAK,CAACM,IAAN,EANI;;AAAA;AAMlBC,YAAAA,KANkB;AAQxBnB,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEY;AAAR,aAArB;;AARwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAvB;AAYAC,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["import express from 'express'\r\nimport _assignIn from 'lodash/assignIn'\r\n\r\nimport Order from '../models/Order'\r\nimport wrap from '../middlewares/wrap'\r\nimport { isObjectId } from '../middlewares/validators'\r\n\r\nconst router = express.Router()\r\n\r\n\r\nrouter.get('/order/list/', wrap(async (req, res) => {\r\n    const orders = await Order.find(req.query)\r\n    res.status(200).send({ data: orders })\r\n}))\r\n\r\n\r\nrouter.get('/order/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const order = await Order.findById(req.params.id)\r\n    if (!order) return res.status(400).send({ error: `Order Not Found` })\r\n    res.status(200).send({ data: order })\r\n}))\r\n\r\n\r\nrouter.post('/order/', wrap(async (req, res) => {\r\n    const order = new Order({ ...req.body })\r\n\r\n    const invalid = order.validateSync()\r\n    if (invalid) return res.status(400).send({ error: invalid })\r\n\r\n    const saved = await order.save()\r\n\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nmodule.exports = router"],"file":"order.js"}