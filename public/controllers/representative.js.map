{"version":3,"sources":["../../server/controllers/representative.js"],"names":["router","express","Router","get","req","res","Representative","find","query","representatives","status","send","data","isObjectId","findById","params","id","representative","error","post","body","secret","info","Company","select","exec","companies","match","company","_id","validationError","validateSync","errors","save","saved","email","password","json","findOne","verifyPassword","verified","token","undefined","patch","field","value","delete","remove","message","process","env","NODE_ENV","deleteMany","length","module","exports"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport _assignIn from 'lodash/assignIn'\r\nimport _isUndefined from 'lodash/isUndefined'\r\nimport _forEach from 'lodash/forEach'\r\n\r\nimport Representative from '../models/Representative'\r\nimport Company from '../models/Company'\r\n\r\nimport wrap from '../middlewares/wrap'\r\nimport { isObjectId } from '../middlewares/validators'\r\nimport { sign } from '../utils/jwt'\r\n\r\nconst router = express.Router()\r\n\r\n\r\nrouter.get('/representative/list', wrap(async (req, res) => {\r\n    const representatives = await Representative.find(req.query)\r\n    res.status(200).send({ data: representatives })\r\n}))\r\n\r\n\r\nrouter.get('/representative/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const representative = await Representative.findById(req.params.id)\r\n    if (!representative) return res.status(400).send({ error: `Representative Not Found` })\r\n    res.status(200).send({ data: representative })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n * @param {string} secret Secret from company to prove representative's identity\r\n * @param {object} representative Representative object you want to save\r\n */\r\nrouter.post('/representative/', wrap(async (req, res) => {\r\n    const {secret, ...info} = req.body\r\n\r\n    if (!secret) return res.status(400).send({ error: `Secret is required!` })\r\n\r\n    const companies = await Company.find({}).select('+secret').exec()\r\n    let match = null\r\n    _forEach(companies, company => {\r\n        if (company.secret === secret) {\r\n            match = company\r\n            return false\r\n        }\r\n    })\r\n    if (!match) return res.status(400).send({ error: `Secret doesn't match any company` })\r\n    info.company = match._id\r\n\r\n\r\n    const representative = new Representative({ ...info })\r\n\r\n    const validationError = representative.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await representative.save()\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.post('/representative/authenticate', wrap(async (req, res) => {\r\n    if (!req.body.email || !req.body.password) return res.status(400).json({ error: 'Email and password are required!' })\r\n\r\n    let representative = await Representative.findOne({ email: req.body.email }).select('+password').exec()\r\n    if (!representative) return res.status(400).send({ error: `Email or password is incorrect` })\r\n\r\n    const verified = await representative.verifyPassword(req.body.password)\r\n    if (!verified) return res.status(400).send({ error: 'Email or password is incorrect' })\r\n\r\n    const token = sign(representative)\r\n\r\n    representative.password = undefined\r\n\r\n    return res.status(200).send({ token, data: representative })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n *  @param {string}  field Field you want to change\r\n *  @param {string|number}  value New value\r\n * Note: Company field can't be changed\r\n */\r\nrouter.patch('/representative/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const { field, value } = req.body\r\n\r\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\r\n\r\n    const representative = await Representative.findById(req.params.id)\r\n    if (!representative) return res.status(400).send({ error: `Representative Not Found` })\r\n\r\n    if (_isUndefined(representative[field])) return res.status(400).send({ error: `Inexistent field provided: ${field}` })\r\n    if (field === 'company') return res.status(400).send({ error: `Company can't be changed` })\r\n    if (typeof value === 'object') return res.status(400).send({ error: `Field type must match the provided value type` })\r\n\r\n    representative[field] = value\r\n\r\n    const validationError = representative.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await representative.save()\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.delete('/representative/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const representative = await Representative.findById(req.params.id)\r\n    if (!representative) return res.status(400).send({ error: `Representative Not Found` })\r\n\r\n    await representative.remove()\r\n    res.status(200).send({ message: `Representative deleted` })\r\n}))\r\n\r\n\r\n/**\r\n * Adding an opportunity to clear a collection for non-production environment\r\n */\r\nprocess.env.NODE_ENV !== 'pproductionrod' && router.delete('/representative/clear', wrap(async (req, res) => {\r\n    await Representative.deleteMany()\r\n\r\n    const representatives = await Representative.find()\r\n    if (representatives.length) return res.status(500).send({ error: `Due to unknown reason representatives weren't deleted` })\r\n\r\n    res.status(200).send({ message: 'Representatives were deleted' })\r\n}))\r\n\r\n\r\nmodule.exports = router"],"file":"representative.js"}