{"version":3,"sources":["..\\..\\server\\controllers\\сustomer.js"],"names":["router","express","Router","get","req","res","Customer","find","query","customer","status","send","data","isObjectId","findById","params","id","error","post","body","validationError","validateSync","errors","save","saved","email","password","json","findOne","select","exec","verifyPassword","verified","token","undefined","patch","field","value","message","delete","remove","process","env","NODE_ENV","deleteMany","customers","length","module","exports"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport _isUndefined from 'lodash/isUndefined'\r\n\r\nimport Customer from '../models/Customer'\r\nimport { sign } from '../utils/jwt'\r\n\r\nimport wrap from '../middlewares/wrap'\r\nimport { isObjectId } from '../middlewares/validators';\r\n\r\nconst router = express.Router()\r\n\r\n\r\nrouter.get('/customer/list/', wrap(async (req, res) => {\r\n    const customer = await Customer.find(req.query)\r\n    return res.status(200).send({ data: customer })\r\n}))\r\n\r\n\r\nrouter.get('/customer/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const customer = await Customer.findById(req.params.id)\r\n    if (!customer) return res.status(400).send({ error: `Customer not found` })\r\n    return res.status(200).send({ data: customer })\r\n}))\r\n\r\n\r\nrouter.post('/customer/', wrap(async (req, res) => {\r\n    const customer = new Customer({ ...req.body })\r\n\r\n    const validationError = customer.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await customer.save()\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.post('/customer/authenticate', wrap(async (req, res) => {\r\n    if (!req.body.email || !req.body.password) return res.status(400).json({ error: 'Email and password are required!' })\r\n\r\n    let customer = await Customer.findOne({ email: req.body.email }).select('+password').exec()\r\n    if (!customer) return res.status(400).send({ error: `Email or password is incorrect` })\r\n\r\n    const verified = await customer.verifyPassword(req.body.password)\r\n    if (!verified) return res.status(400).send({ error: 'Email or password is incorrect' })\r\n\r\n    const token = sign(customer)\r\n\r\n    customer.password = undefined\r\n\r\n    return res.status(200).send({ token, data: customer })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n *  @param {string}  field Field you want to change\r\n *  @param {string|number}  value New value\r\n */\r\nrouter.patch('/customer/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const { field, value } = req.body\r\n\r\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\r\n\r\n    const customer = await Customer.findById(req.params.id)\r\n    if (!customer) return res.status(400).send({ error: `Customer Not Found` })\r\n\r\n    if (typeof value === 'object') return res.status(400).send({ error: `Field type must match the provided value type` })\r\n\r\n    customer[field] = value\r\n\r\n    const validationError = customer.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await customer.save()\r\n    if (saved.password) return res.status(200).send({ message: `Password was changed` })\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.delete('/customer/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const customer = await Customer.findById(req.params.id)\r\n    if (!customer) return res.status(400).send({ error: `Customer Not Found` })\r\n\r\n    await customer.remove()\r\n    res.status(200).send({ message: `Customer deleted` })\r\n}))\r\n\r\n\r\n/**\r\n * Adding an opportunity to clear a collection for non-production environment\r\n */\r\nprocess.env.NODE_ENV !== 'prod' && router.delete('/customer/clear', wrap(async (req, res) => {\r\n    await Customer.deleteMany()\r\n\r\n    const customers = await Customer.find()\r\n    if (customers.length) return res.status(500).send({ error: `Due to unknown reason customers weren't deleted` })\r\n\r\n    res.status(200).send({ message: 'Customers were deleted' })\r\n}))\r\n\r\n\r\nmodule.exports = router"],"file":"сustomer.js"}