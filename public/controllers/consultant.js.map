{"version":3,"sources":["../../server/controllers/consultant.js"],"names":["router","express","Router","get","req","res","Consultant","find","query","consultants","status","send","data","isObjectId","findById","params","id","populate","consultant","error","post","body","validationError","validateSync","errors","save","saved","email","password","json","findOne","select","exec","verifyPassword","verified","token","undefined","patch","field","value","old","includes","languages","push","markModified","isCompleted","completed","upload","single","imageFile","fs","readFileSync","file","path","finalImg","contentType","mimetype","Buffer","certificate","title","type","note","image","chat","delete","remove","message","process","env","NODE_ENV","deleteMany","length","age","phone","images","gender","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;AAIA,IAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAIAF,MAAM,CAACG,GAAP,CAAW,kBAAX,EAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNC,oBAAWC,IAAX,CAAgBH,GAAG,CAACI,KAApB,CADM;;AAAA;AAC1BC,YAAAA,WAD0B;AAEhCJ,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEH;AAAR,aAArB;;AAFgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAA/B;AAMAT,MAAM,CAACG,GAAP,CAAW,sBAAX,EAAmCU,sBAAnC,EAA+C;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvBC,oBAAWQ,QAAX,CAAoBV,GAAG,CAACW,MAAJ,CAAWC,EAA/B,EAAmCC,QAAnC,CAA4C,SAA5C,CADuB;;AAAA;AAC1CC,YAAAA,UAD0C;;AAAA,gBAE3CA,UAF2C;AAAA;AAAA;AAAA;;AAAA,8CAExBb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAFwB;;AAAA;AAGhDd,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEM;AAAR,aAArB;;AAHgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAA/C;AAOAlB,MAAM,CAACoB,IAAP,CAAY,cAAZ,EAA4B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBa,YAAAA,UADuB,GACV,IAAIZ,mBAAJ,mBAAoBF,GAAG,CAACiB,IAAxB,EADU;AAGvBC,YAAAA,eAHuB,GAGLJ,UAAU,CAACK,YAAX,EAHK;;AAAA,iBAIzBD,eAJyB;AAAA;AAAA;AAAA;;AAAA,8CAIDjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,EAAEG,eAAe,CAACE;AAAzB,aAArB,CAJC;;AAAA;AAAA;AAAA,mBAMTN,UAAU,CAACO,IAAX,EANS;;AAAA;AAMvBC,YAAAA,KANuB;AAO7BrB,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEc;AAAR,aAArB;;AAP6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAA5B;AAWA1B,MAAM,CAACoB,IAAP,CAAY,0BAAZ,EAAwC;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrC,CAACD,GAAG,CAACiB,IAAJ,CAASM,KAAV,IAAmB,CAACvB,GAAG,CAACiB,IAAJ,CAASO,QADQ;AAAA;AAAA;AAAA;;AAAA,8CACSvB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBmB,IAAhB,CAAqB;AAAEV,cAAAA,KAAK,EAAE;AAAT,aAArB,CADT;;AAAA;AAAA;AAAA,mBAGlBb,oBAAWwB,OAAX,CAAmB;AAAEH,cAAAA,KAAK,EAAEvB,GAAG,CAACiB,IAAJ,CAASM;AAAlB,aAAnB,EAA8CI,MAA9C,CAAqD,WAArD,EAAkEd,QAAlE,CAA2E,SAA3E,EAAsFe,IAAtF,EAHkB;;AAAA;AAGrCd,YAAAA,UAHqC;;AAAA,gBAIpCA,UAJoC;AAAA;AAAA;AAAA;;AAAA,8CAIjBb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAJiB;;AAAA;AAAA;AAAA,mBAMlBD,UAAU,CAACe,cAAX,CAA0B7B,GAAG,CAACiB,IAAJ,CAASO,QAAnC,CANkB;;AAAA;AAMnCM,YAAAA,QANmC;;AAAA,gBAOpCA,QAPoC;AAAA;AAAA;AAAA;;AAAA,8CAOnB7B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,EAAE;AAAT,aAArB,CAPmB;;AAAA;AASnCgB,YAAAA,KATmC,GAS3B,eAAKjB,UAAL,CAT2B;AAWzCA,YAAAA,UAAU,CAACU,QAAX,GAAsBQ,SAAtB;AAXyC,8CAalC/B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEwB,cAAAA,KAAK,EAALA,KAAF;AAASvB,cAAAA,IAAI,EAAEM;AAAf,aAArB,CAbkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAxC;AAiBA;;;;;;;;;AAQAlB,MAAM,CAACqC,KAAP,CAAa,sBAAb,EAAqCxB,sBAArC,EAAiD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACtBD,GAAG,CAACiB,IADkB,EAC5CiB,KAD4C,aAC5CA,KAD4C,EACrCC,KADqC,aACrCA,KADqC,EAC9BC,GAD8B,aAC9BA,GAD8B;;AAAA,kBAG9C,CAACF,KAAD,IAAU,CAACC,KAHmC;AAAA;AAAA;AAAA;;AAAA,8CAGrBlC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAHqB;;AAAA;AAAA,iBAI9C,CAAC,MAAD,EAAS,UAAT,EAAqB,WAArB,EAAkCsB,QAAlC,CAA2CH,KAA3C,CAJ8C;AAAA;AAAA;AAAA;;AAAA,8CAKvCjC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,YAAKmB,KAAL;AAAP,aAArB,CALuC;;AAAA;AAAA;AAAA,mBAQzBhC,oBAAWQ,QAAX,CAAoBV,GAAG,CAACW,MAAJ,CAAWC,EAA/B,EAAmCC,QAAnC,CAA4C,SAA5C,EAAuDe,IAAvD,EARyB;;AAAA;AAQ5Cd,YAAAA,UAR4C;;AAAA,gBAS7CA,UAT6C;AAAA;AAAA;AAAA;;AAAA,8CAS1Bb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAT0B;;AAAA;AAWlD;AACA;AACA;AACA;AACA;AAEA,gBAAImB,KAAK,KAAK,WAAV,IAAyB,QAAOC,KAAP,MAAiB,QAA9C,EAAwD;AACpDrB,cAAAA,UAAU,CAACwB,SAAX,CAAqBC,IAArB,CAA0BJ,KAA1B,EADoD,CAGpD;AACA;;AAEArB,cAAAA,UAAU,CAAC0B,YAAX,CAAwB,WAAxB;AACH,aAPD,MAOO,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC/DrB,cAAAA,UAAU,CAACoB,KAAD,CAAV,GAAoBC,KAApB;AACH;;AAEKjB,YAAAA,eA5B4C,GA4B1BJ,UAAU,CAACK,YAAX,EA5B0B;;AAAA,iBA6B9CD,eA7B8C;AAAA;AAAA;AAAA;;AAAA,8CA6BtBjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,EAAEG,eAAe,CAACE;AAAzB,aAArB,CA7BsB;;AAAA;AA+BlD,gBAAIqB,WAAW,CAAC3B,UAAD,CAAf,EAA6BA,UAAU,CAAC4B,SAAX,GAAuB,IAAvB;AA/BqB;AAAA,mBAiC9B5B,UAAU,CAACO,IAAX,EAjC8B;;AAAA;AAiC5CC,YAAAA,KAjC4C;;AAmClD;AACAA,YAAAA,KAAK,CAACE,QAAN,GAAiBQ,SAAjB;AAEA/B,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEc;AAAR,aAArB;;AAtCkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAjD;AA0CA1B,MAAM,CAACqC,KAAP,CAAa,kCAAb,EAAiDxB,sBAAjD,EAA6DkC,gBAAOC,MAAP,CAAc,MAAd,CAA7D,EAAoF;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAO5C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC5DC,oBAAWQ,QAAX,CAAoBV,GAAG,CAACW,MAAJ,CAAWC,EAA/B,EAAmCC,QAAnC,CAA4C,SAA5C,CAD4D;;AAAA;AAC/EC,YAAAA,UAD+E;;AAAA,gBAEhFA,UAFgF;AAAA;AAAA;AAAA;;AAAA,8CAE7Db,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAF6D;;AAAA;AAI/E8B,YAAAA,SAJ+E,GAInEC,YAAGC,YAAH,CAAgB/C,GAAG,CAACgD,IAAJ,CAASC,IAAzB,CAJmE;AAKjFC,YAAAA,QALiF,GAKtE;AACXC,cAAAA,WAAW,EAAEnD,GAAG,CAACgD,IAAJ,CAASI,QADX;AAEX5C,cAAAA,IAAI,EAAE,IAAI6C,MAAJ,CAAWR,SAAX,EAAsB,QAAtB;AAFK,aALsE;AAUrF/B,YAAAA,UAAU,CAACwC,WAAX,GAAyB;AACrBC,cAAAA,KAAK,EAAEvD,GAAG,CAACiB,IAAJ,CAASsC,KADK;AAErBC,cAAAA,IAAI,EAAExD,GAAG,CAACiB,IAAJ,CAASuC,IAFM;AAGrBC,cAAAA,IAAI,EAAEzD,GAAG,CAACiB,IAAJ,CAASwC,IAHM;AAIrBC,cAAAA,KAAK,EAAER;AAJc,aAAzB;AAOMhC,YAAAA,eAjB+E,GAiB7DJ,UAAU,CAACK,YAAX,EAjB6D;;AAAA,iBAkBjFD,eAlBiF;AAAA;AAAA;AAAA;;AAAA,8CAkBzDjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,EAAEG,eAAe,CAACE;AAAzB,aAArB,CAlByD;;AAAA;AAAA;AAAA,mBAoBjEN,UAAU,CAACO,IAAX,EApBiE;;AAAA;AAoB/EC,YAAAA,KApB+E;AAsBrFrB,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEc;AAAR,aAArB;;AAtBqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAApF;AA0BA1B,MAAM,CAACqC,KAAP,CAAa,2BAAb,EAA0CxB,sBAA1C,EAAsD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC9BC,oBAAWQ,QAAX,CAAoBV,GAAG,CAACW,MAAJ,CAAWC,EAA/B,CAD8B;;AAAA;AACjDE,YAAAA,UADiD;;AAAA,gBAElDA,UAFkD;AAAA;AAAA;AAAA;;AAAA,8CAE/Bb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAF+B;;AAAA;AAIvDD,YAAAA,UAAU,CAAC6C,IAAX,GAAkB3D,GAAG,CAACiB,IAAtB;AAEMC,YAAAA,eANiD,GAM/BJ,UAAU,CAACK,YAAX,EAN+B;;AAAA,iBAOnDD,eAPmD;AAAA;AAAA;AAAA;;AAAA,8CAO3BjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK,EAAEG,eAAe,CAACE;AAAzB,aAArB,CAP2B;;AAAA;AAAA;AAAA,mBASnCN,UAAU,CAACO,IAAX,EATmC;;AAAA;AASjDC,YAAAA,KATiD;AAUvDrB,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,IAAI,EAAEc;AAAR,aAArB;;AAVuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAtD;AAcA1B,MAAM,CAACgE,MAAP,CAAc,sBAAd,EAAsCnD,sBAAtC,EAAkD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC1BC,oBAAWQ,QAAX,CAAoBV,GAAG,CAACW,MAAJ,CAAWC,EAA/B,CAD0B;;AAAA;AAC7CE,YAAAA,UAD6C;;AAAA,gBAE9CA,UAF8C;AAAA;AAAA;AAAA;;AAAA,8CAE3Bb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAF2B;;AAAA;AAAA;AAAA,mBAI7CD,UAAU,CAAC+C,MAAX,EAJ6C;;AAAA;AAKnD5D,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEuD,cAAAA,OAAO;AAAT,aAArB;;AALmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAlD;AASA;;;;AAGAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmCrE,MAAM,CAACgE,MAAP,CAAc,mBAAd,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK,kBAAO5D,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjEC,oBAAWgE,UAAX,EADiE;;AAAA;AAAA;AAAA,mBAG7ChE,oBAAWC,IAAX,EAH6C;;AAAA;AAGjEE,YAAAA,WAHiE;;AAAA,iBAInEA,WAAW,CAAC8D,MAJuD;AAAA;AAAA;AAAA;;AAAA,8CAIxClE,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEQ,cAAAA,KAAK;AAAP,aAArB,CAJwC;;AAAA;AAMvEd,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEuD,cAAAA,OAAO,EAAE;AAAX,aAArB;;AANuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAL;;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAnC;;AAUA,IAAMrB,WAAW,GAAG,SAAdA,WAAc,CAAA3B,UAAU,EAAI;AAC9B,SAAOA,UAAU,CAACsD,GAAX,IAAkBtD,UAAU,CAACuD,KAA7B,IAAsCvD,UAAU,CAAC4C,KAAX,KAAqBY,iBAAOxD,UAAlE,IACAA,UAAU,CAACyD,MADX,IACqBzD,UAAU,CAACwC,WADhC,IAC+CxC,UAAU,CAACgB,QADjE;AAEH,CAHD;;AAKA0C,MAAM,CAACC,OAAP,GAAiB7E,MAAjB","sourcesContent":["import express from 'express'\r\nimport fs from 'fs'\r\nimport _assignIn from 'lodash/assignIn'\r\nimport _forEach from 'lodash/forEach'\r\n\r\nimport Consultant from '../models/Consultant'\r\nimport Certificate from '../models/Certificate'\r\n\r\nimport { sign } from '../utils/jwt'\r\nimport { images } from '../utils/validation/defaults'\r\nimport { isObjectId } from '../middlewares/validators'\r\n\r\nimport wrap from '../middlewares/wrap'\r\nimport upload from '../middlewares/multer'\r\n\r\n\r\n\r\nconst router = express.Router()\r\n\r\n\r\n\r\nrouter.get('/consultant/list', wrap(async (req, res) => {\r\n    const consultants = await Consultant.find(req.query)\r\n    res.status(200).send({ data: consultants })\r\n}))\r\n\r\n\r\nrouter.get('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id).populate('company')\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n    res.status(200).send({ data: consultant })\r\n}))\r\n\r\n\r\nrouter.post('/consultant/', wrap(async (req, res) => {\r\n    const consultant = new Consultant({ ...req.body })\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await consultant.save()\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.post('/consultant/authenticate', wrap(async (req, res) => {\r\n    if (!req.body.email || !req.body.password) return res.status(400).json({ error: 'Email and password are required!' })\r\n\r\n    let consultant = await Consultant.findOne({ email: req.body.email }).select('+password').populate('company').exec()\r\n    if (!consultant) return res.status(400).send({ error: `Email or password is incorrect` })\r\n\r\n    const verified = await consultant.verifyPassword(req.body.password)\r\n    if (!verified) return res.status(400).send({ error: 'Email or password is incorrect' })\r\n\r\n    const token = sign(consultant)\r\n\r\n    consultant.password = undefined\r\n\r\n    return res.status(200).send({ token, data: consultant })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n *  @param {string} field Field you want to change\r\n *  @param {string|number|array|object|boolean}  value New value\r\n *  @param {string} old (Optional) Must be provided if you want to change password, \r\n *  Note: 'Bill', 'verified', 'completed' fields can't be changed explicitly using this method\r\n *        'Completed' field may be set to true if all fields required for it was initialized\r\n */\r\nrouter.patch('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    let { field, value, old } = req.body\r\n\r\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\r\n    if (['bill', 'verified', 'completed'].includes(field)) {\r\n        return res.status(400).send({ error: `${field} field can't be changed this way ` })\r\n    }\r\n\r\n    const consultant = await Consultant.findById(req.params.id).populate('company').exec()\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    // temporary unavailable\r\n    // if (field === 'password') {\r\n    // const verified = await consultant.verifyPassword(old)\r\n    // if (!verified) return res.status(400).send({ error: 'Old password is incorrect!' })\r\n    // }\r\n\r\n    if (field === 'languages' && typeof value === 'object') {\r\n        consultant.languages.push(value)\r\n\r\n        //TODO: editing and removing of language and its certificate\r\n        // _forEach(value, language => consultant.language.push(language))\r\n\r\n        consultant.markModified('languages')\r\n    } else if (typeof value === 'string' || typeof value === 'number') {\r\n        consultant[field] = value\r\n    }\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    if (isCompleted(consultant)) consultant.completed = true\r\n\r\n    const saved = await consultant.save()\r\n\r\n    /* don't let the passport be sent to client */\r\n    saved.password = undefined\r\n\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.patch('/consultant/list/:id/certificate', isObjectId, upload.single('file'), wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id).populate('company')\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    const imageFile = fs.readFileSync(req.file.path)\r\n    var finalImg = {\r\n        contentType: req.file.mimetype,\r\n        data: new Buffer(imageFile, 'base64')\r\n    };\r\n\r\n    consultant.certificate = {\r\n        title: req.body.title,\r\n        type: req.body.type,\r\n        note: req.body.note,\r\n        image: finalImg\r\n    }\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await consultant.save()\r\n\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.patch('/consultant/list/:id/chat', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id)\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    consultant.chat = req.body\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await consultant.save()\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.delete('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id)\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    await consultant.remove()\r\n    res.status(200).send({ message: `Consultant deleted` })\r\n}))\r\n\r\n\r\n/**\r\n * Adding an opportunity to clear a collection for non-production environment\r\n */\r\nprocess.env.NODE_ENV !== 'prod' && router.delete('/consultant/clear', wrap(async (req, res) => {\r\n    await Consultant.deleteMany()\r\n\r\n    const consultants = await Consultant.find()\r\n    if (consultants.length) return res.status(500).send({ error: `Due to unknown reason consultants weren't deleted` })\r\n\r\n    res.status(200).send({ message: 'Consultants were deleted' })\r\n}))\r\n\r\n\r\nconst isCompleted = consultant => {\r\n    return consultant.age && consultant.phone && consultant.image !== images.consultant\r\n        && consultant.gender && consultant.certificate && consultant.verified\r\n}\r\n\r\nmodule.exports = router"],"file":"consultant.js"}