{"version":3,"sources":["../../server/controllers/consultant.js"],"names":["router","express","Router","get","req","res","Consultant","find","query","consultants","status","send","data","isObjectId","findById","params","id","consultant","error","post","body","validationError","validateSync","errors","save","saved","email","password","json","findOne","select","exec","verifyPassword","verified","token","undefined","patch","field","value","old","includes","console","log","languages","push","markModified","isCompleted","completed","chat","delete","remove","message","process","env","NODE_ENV","deleteMany","length","age","phone","image","images","gender","certificate","module","exports"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport _assignIn from 'lodash/assignIn'\r\nimport _forEach from 'lodash/forEach'\r\n\r\nimport { sign } from '../utils/jwt'\r\nimport Consultant from '../models/Consultant'\r\nimport wrap from '../middlewares/wrap'\r\nimport { isObjectId } from '../middlewares/validators'\r\nimport { images } from '../utils/validation/defaults'\r\n\r\nconst router = express.Router()\r\n\r\n\r\nrouter.get('/consultant/list', wrap(async (req, res) => {\r\n    const consultants = await Consultant.find(req.query)\r\n    res.status(200).send({ data: consultants })\r\n}))\r\n\r\n\r\nrouter.get('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id)\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n    res.status(200).send({ data: consultant })\r\n}))\r\n\r\n\r\nrouter.post('/consultant/', wrap(async (req, res) => {\r\n    const consultant = new Consultant({ ...req.body })\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await consultant.save()\r\n    res.status(201).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.post('/consultant/authenticate', wrap(async (req, res) => {\r\n    if (!req.body.email || !req.body.password) return res.status(400).json({ error: 'Email and password are required!' })\r\n\r\n    let consultant = await Consultant.findOne({ email: req.body.email }).select('+password').exec()\r\n    if (!consultant) return res.status(400).send({ error: `Email or password is incorrect` })\r\n\r\n    const verified = await consultant.verifyPassword(req.body.password)\r\n    if (!verified) return res.status(400).send({ error: 'Email or password is incorrect' })\r\n\r\n    const token = sign(consultant)\r\n\r\n    consultant.password = undefined\r\n\r\n    return res.status(200).send({ token, data: consultant })\r\n}))\r\n\r\n\r\n/**\r\n * Request body must be like:\r\n *  @param {string} field Field you want to change\r\n *  @param {string|number|array|object|boolean}  value New value\r\n *  @param {string} old (Optional) Must be provided if you want to change password, \r\n *  Note: 'Bill', 'verified', 'completed' fields can't be changed explicitly using this method\r\n *        'Completed' field may be set to true if all fields required for it was initialized\r\n */\r\nrouter.patch('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    let { field, value, old } = req.body\r\n\r\n    if (!field || !value) return res.status(400).send({ error: `Wrong data! Field and value must be provided` })\r\n    if (['bill', 'verified', 'completed'].includes(field)) {\r\n        return res.status(400).send({ error: `${field} field can't be changed this way ` })\r\n    }\r\n\r\n    const consultant = await Consultant.findById(req.params.id).exec()\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    // temporary unavailable\r\n    // if (field === 'password') {\r\n        // const verified = await consultant.verifyPassword(old)\r\n        // if (!verified) return res.status(400).send({ error: 'Old password is incorrect!' })\r\n    // }\r\n\r\n    if (field === 'languages' && typeof value === 'object') {\r\n        console.log('lang', value)\r\n        consultant.languages.push(value)\r\n\r\n        //TODO: editing and removing of language and its certificate\r\n        // _forEach(value, language => consultant.language.push(language))\r\n\r\n        consultant.markModified('languages')\r\n    } else if (typeof value === 'string' || typeof value === 'number') {\r\n        consultant[field] = value\r\n    }\r\n\r\n    console.log(consultant)\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    if (isCompleted(consultant)) consultant.completed = true\r\n\r\n    const saved = await consultant.save()\r\n\r\n    /* don't let the passport be sent to client */\r\n    saved.password = undefined\r\n\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.patch('/consultant/list/:id/chat', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id)\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    consultant.chat = req.body\r\n\r\n    const validationError = consultant.validateSync()\r\n    if (validationError) return res.status(400).send({ error: validationError.errors })\r\n\r\n    const saved = await consultant.save()\r\n    res.status(200).send({ data: saved })\r\n}))\r\n\r\n\r\nrouter.delete('/consultant/list/:id', isObjectId, wrap(async (req, res) => {\r\n    const consultant = await Consultant.findById(req.params.id)\r\n    if (!consultant) return res.status(400).send({ error: `Consultant Not Found` })\r\n\r\n    await consultant.remove()\r\n    res.status(200).send({ message: `Consultant deleted` })\r\n}))\r\n\r\n\r\n/**\r\n * Adding an opportunity to clear a collection for non-production environment\r\n */\r\nprocess.env.NODE_ENV !== 'prod' && router.delete('/consultant/clear', wrap(async (req, res) => {\r\n    await Consultant.deleteMany()\r\n\r\n    const consultants = await Consultant.find()\r\n    if (consultants.length) return res.status(500).send({ error: `Due to unknown reason consultants weren't deleted` })\r\n\r\n    res.status(200).send({ message: 'Consultants were deleted' })\r\n}))\r\n\r\n\r\nconst isCompleted = consultant => {\r\n    return consultant.age && consultant.phone && consultant.image !== images.consultant\r\n        && consultant.gender && consultant.certificate && consultant.verified\r\n}\r\n\r\nmodule.exports = router"],"file":"consultant.js"}