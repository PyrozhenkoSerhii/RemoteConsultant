{"version":3,"sources":["../../server/models/Representative.js"],"names":["RepresentativeSchema","Schema","email","type","String","lowercase","trim","index","unique","required","messages","match","regex","minLength","min","restrictions","maxlength","max","fullname","minlength","password","select","bcrypt","phone","Number","image","default","images","representative","url","company","Types","ObjectId","ref","plugin","timestamps","post","doc","next","mongoose","model","findById","representatives","push","_id","save","saved","module","exports"],"mappings":"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","sourcesContent":["import mongoose, { Schema } from 'mongoose'\r\nimport bcrypt from 'mongoose-bcrypt'\r\nimport timestamps from 'mongoose-timestamp'\r\n\r\nimport { images } from '../utils/validation/defaults'\r\nimport messages from '../utils/validation/messages'\r\nimport regex from '../utils/validation/regex'\r\nimport { email, fullname, password, url, } from '../utils/validation/range'\r\n\r\nconst RepresentativeSchema = new Schema({\r\n    email: {\r\n        type: String,\r\n        lowercase: true,\r\n        trim: true,\r\n        index: true,\r\n        unique: true,\r\n        required: [true, messages.required.email],\r\n        match: [regex.email, messages.match.email],\r\n        minLength: [email.min, messages.restrictions.email],\r\n        maxlength: [email.max, messages.restrictions.email]\r\n    },\r\n    fullname: {\r\n        type: String,\r\n        trim: true,\r\n        required: [true, messages.required.fullname],\r\n        match: [regex.fullname, messages.match.fullname],\r\n        minlength: [fullname.min, messages.restrictions.fullname],\r\n        maxlength: [fullname.max, messages.restrictions.fullname]\r\n    },\r\n    password: {\r\n        type: String,\r\n        select: false,\r\n        bcrypt: true,\r\n        required: [true, messages.required.password],\r\n        match: [regex.password, messages.match.password],\r\n        minlength: [password.min, messages.restrictions.password],\r\n        maxlength: [password.max, messages.restrictions.password]\r\n    },\r\n    phone: {\r\n        type: Number,\r\n        required: [true, messages.required.phone],\r\n        match: [regex.phone, messages.match.phone]\r\n    },\r\n    image: {\r\n        type: String,\r\n        default: images.representative,\r\n        match: [regex.url, messages.match.url],\r\n        minlength: [url.min, messages.restrictions.url],\r\n        maxlength: [url.max, messages.restrictions.url]\r\n    },\r\n    company: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Company',\r\n        required: [true, messages.required.company]\r\n    }\r\n})\r\n\r\nRepresentativeSchema.plugin(bcrypt)\r\nRepresentativeSchema.plugin(timestamps)\r\n\r\nRepresentativeSchema.post('save', async function (doc, next) {\r\n    // to avoid circular dependency use model directly from mongoose\r\n    const company = await mongoose.model('Company').findById(doc.company)\r\n    company.representatives.push(this._id)\r\n    const saved = await company.save()\r\n\r\n    next()\r\n})\r\n\r\n\r\n\r\nmodule.exports = mongoose.model('Representative', RepresentativeSchema)\r\n\r\n\r\n"],"file":"Representative.js"}