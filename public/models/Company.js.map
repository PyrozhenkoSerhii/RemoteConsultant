{"version":3,"sources":["../../server/models/Company.js"],"names":["CompanySchema","Schema","title","type","String","trim","required","messages","index","unique","minlength","min","restrictions","maxlength","max","website","match","regex","url","secret","select","info","image","default","images","company","importConfig","ImportConfig","requests","Request","certificates","Types","ObjectId","ref","representatives","consultants","products","plugin","timestamps","pre","next","Product","deleteMany","_id","err","logger","error","log","Representative","module","exports","mongoose","model"],"mappings":"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","sourcesContent":["import mongoose, { Schema } from 'mongoose'\r\nimport timestamps from 'mongoose-timestamp'\r\n\r\nimport regex from '../utils/validation/regex'\r\nimport messages from '../utils/validation/messages'\r\nimport { images } from '../utils/validation/defaults'\r\nimport { title, url, secret, info } from '../utils/validation/range'\r\nimport logger from '../utils/logger'\r\n\r\nimport { Request } from './submodels/Request'\r\nimport { ImportConfig } from './submodels/ImportConfig'\r\n\r\nimport Representative from './Representative'\r\n\r\n\r\nconst CompanySchema = new Schema({\r\n    title: {\r\n        type: String,\r\n        trim: true,\r\n        required: [true, messages.required.title],\r\n        index: true,\r\n        unique: true,\r\n        minlength: [title.min, messages.restrictions.title],\r\n        maxlength: [title.max, messages.restrictions.title]\r\n    },\r\n    website: {\r\n        type: String,\r\n        required: [true, messages.required.website],\r\n        trim: true,\r\n        unique: true,\r\n        match: [regex.url, messages.match.url],\r\n        minlength: [url.min, messages.restrictions.url],\r\n        maxlength: [url.max, messages.restrictions.url]\r\n    },\r\n    secret: {\r\n        type: String,\r\n        required: [true, messages.required.secret],\r\n        trim: true,\r\n        select: false,\r\n        match: [regex.secret, messages.match.secret],\r\n        minlength: [secret.min, messages.restrictions.secret],\r\n        maxlength: [secret.max, messages.restrictions.secret]\r\n    },\r\n    info: {\r\n        type: String,\r\n        trim: true,\r\n        maxlength: [info.max, messages.restrictions.info]\r\n    },\r\n    image: {\r\n        type: String,\r\n        default: images.company,\r\n        match: [regex.url, messages.match.url],\r\n        minlength: [url.min, messages.restrictions.url],\r\n        maxlength: [url.max, messages.restrictions.url]\r\n    },\r\n    importConfig: ImportConfig,\r\n    requests: [Request],\r\n    certificates: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Certificate'\r\n    }],\r\n    representatives: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Consultant'\r\n    }],\r\n    consultants: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Consultant'\r\n    }],\r\n    products: [{\r\n        type: Schema.Types.ObjectId,\r\n        ref: 'Product'\r\n    }]\r\n})\r\n\r\nCompanySchema.plugin(timestamps)\r\n\r\nCompanySchema.pre('remove', function (next) {\r\n    /* Note: these functions don't trigger post/pre hooks */\r\n    Product.deleteMany({ company: this._id }, err => {\r\n        if (err) logger.error(`Something went wrong while deleting products of company ${this.title}. Method: company remove, cascade delete`)\r\n        else logger.log(`Products of company ${this.title} were deleted. Method: company remove, cascade delete`)\r\n    })\r\n    Representative.deleteMany({ company: this._id }, err => {\r\n        if (err) logger.error(`Something went wrong while deleting representatives of company ${this.title}. Method: company remove, cascade delete`)\r\n        else logger.log(`Representatives of company ${this.title} were deleted. Method: company remove, cascade delete`)\r\n    })\r\n\r\n    next()\r\n})\r\n\r\n\r\nmodule.exports = mongoose.model('Company', CompanySchema)\r\n\r\nimport Product from './Product'\r\n"],"file":"Company.js"}