{"version":3,"sources":["../server/server.js"],"names":["dotenv","config","silent","PeerServer","require","ExpressPeerServer","api","port","process","env","PORT","get","limiter","windowsMs","max","blacklist","configure","store","type","host","use","req","res","next","header","enviroment","NODE_ENV","enable","bodyParser","urlencoded","extended","json","loggerMiddleware","secret","unless","originalUrl","match","method","err","name","logger","warn","status","send","error","customer","product","company","consultant","consultation","representative","order","certificate","errorHandler","express","static","path","join","__dirname","sendFile","all","mongoose","connect","then","info","set","coll","server","listen","exit","peerServer","debug","ssl","key","fs","readFileSync","cert","passphrase","PASSPHRASE","module","exports"],"mappings":";;AAAA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAzBAA,gBAAOC,MAAP,CAAc;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAd;;AA4BA,IAAMC,UAAU,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBC,iBAAnC;;AACA,IAAMC,GAAG,GAAG,uBAAZ;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBT,gBAAOU,GAAP,CAAW,UAAX,CAAjC;;AAGA,IAAMC,OAAO,GAAG,+BAAe;AAC9BC,EAAAA,SAAS,EAAE,KAAK,EAAL,GAAU,IADS;AAE9BC,EAAAA,GAAG,EAAE;AAFyB,CAAf,CAAhB;;AAIAC,6BAAUC,SAAV,CAAoB;AACnBC,EAAAA,KAAK,EAAE;AACNC,IAAAA,IAAI,EAAE,OADA;AAENC,IAAAA,IAAI,EAAElB,gBAAOU,GAAP,CAAW,YAAX,CAFA;AAGNJ,IAAAA,IAAI,EAAEN,gBAAOU,GAAP,CAAW,YAAX;AAHA;AADY,CAApB;;AAQAL,GAAG,CAACc,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3BD,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAD,EAAAA,IAAI;AACJ,CAHD;AAKA,IAAME,UAAU,GAAGjB,OAAO,CAACC,GAAR,CAAYiB,QAAZ,IAAwB,KAA3C;AACA,IAAID,UAAU,KAAK,KAAnB,EAA0BnB,GAAG,CAACqB,MAAJ,CAAW,aAAX;AAE1BrB,GAAG,CAACc,GAAJ,CAAQ,sBAAR;AACAd,GAAG,CAACc,GAAJ,CAAQ,oBAAR;AACAd,GAAG,CAACc,GAAJ,CAAQQ,oBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAxB,GAAG,CAACc,GAAJ,CAAQQ,oBAAWG,IAAX,EAAR;AACAzB,GAAG,CAACc,GAAJ,CAAQR,OAAR;AAEAN,GAAG,CAACc,GAAJ,CAAQY,eAAR,E,CAGA;;AACAP,UAAU,KAAK,YAAf,IAA+BnB,GAAG,CAACc,GAAJ,CAAQ,yBAAI;AAAEa,EAAAA,MAAM,EAAEhC,gBAAOU,GAAP,CAAW,YAAX;AAAV,CAAJ,EAA0CuB,MAA1C,CAAiD,UAAAb,GAAG;AAAA,SAC1FA,GAAG,CAACc,WAAJ,CAAgBC,KAAhB,CAAsB,eAAtB,KACAf,GAAG,CAACc,WAAJ,KAAoB,gBAApB,IAAwCd,GAAG,CAACgB,MAAJ,KAAe,MADvD,IAEAhB,GAAG,CAACc,WAAJ,KAAoB,iBAApB,IAAyCd,GAAG,CAACgB,MAAJ,KAAe,MAFxD,IAGAhB,GAAG,CAACc,WAAJ,KAAoB,qBAApB,IAA6Cd,GAAG,CAACgB,MAAJ,KAAe,MAH5D,IAIAhB,GAAG,CAACc,WAAJ,KAAoB,4BAJpB,IAKAd,GAAG,CAACc,WAAJ,KAAoB,8BALpB,IAMAd,GAAG,CAACc,WAAJ,KAAoB,kCAPsE;AAAA,CAApD,CAAR,CAA/B;AASAV,UAAU,KAAK,YAAf,IAA+BnB,GAAG,CAACc,GAAJ,CAAQ,UAACkB,GAAD,EAAMjB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/D,MAAIe,GAAG,CAACC,IAAJ,KAAa,mBAAjB,EAAsC;AACrCC,qBAAOC,IAAP,wDAA4DpB,GAAG,CAACc,WAAhE;;AACAb,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK;AAAP,KAArB;AACA;AACD,CAL8B,CAA/B;AAOAtC,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiByB,gBAAjB;AACAvC,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB0B,gBAAjB;AACAxC,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB2B,gBAAjB;AACAzC,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB4B,mBAAjB;AACA1C,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB6B,qBAAjB;AACA3C,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB8B,uBAAjB;AACA5C,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiB+B,cAAjB;AACA7C,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiBgC,oBAAjB;AACA9C,GAAG,CAACc,GAAJ,CAAQiC,qBAAR;AAEA/C,GAAG,CAACc,GAAJ,CAAQkC,iBAAQC,MAAR,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AACApD,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,UAAUU,GAAV,EAAeC,GAAf,EAAoB;AAChCA,EAAAA,GAAG,CAACqC,QAAJ,CAAaH,cAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkC,YAAlC,CAAb;AACA,CAFD;AAIApD,GAAG,CAACsD,GAAJ,CAAQ,GAAR,EAAa,UAACvC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,EAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,iBAAUvB,GAAG,CAACc,WAAd,0BAAyCd,GAAG,CAACgB,MAA7C;AAAP,GAArB;AACA,CAFD;;AAIAwB,kBAASC,OAAT,CAAiB7D,gBAAOU,GAAP,CAAW,qBAAX,CAAjB,EAAoDV,gBAAOU,GAAP,CAAW,YAAX,CAApD,EAA8EoD,IAA9E,CACC;AAAA,SAAMvB,iBAAOwB,IAAP,+BAAmC/D,gBAAOU,GAAP,CAAW,iBAAX,CAAnC,0BAAN;AAAA,CADD,EAEC,UAAA2B,GAAG;AAAA,SAAIE,iBAAOI,KAAP,mDAAwD3C,gBAAOU,GAAP,CAAW,iBAAX,CAAxD,YAA8F2B,GAA9F,CAAJ;AAAA,CAFJ;;AAIAuB,kBAASI,GAAT,CAAa,gBAAb,EAA+B,IAA/B;;AACAxC,UAAU,KAAK,KAAf,IAAwBoC,kBAASI,GAAT,CAAa,OAAb,EAAsB,UAACC,IAAD,EAAO7B,MAAP,EAAkB;AAC/DG,mBAAOwB,IAAP,6BAAiCE,IAAjC,uBAAkD7B,MAAlD;AACA,CAFuB,CAAxB;AAMA,IAAM8B,MAAM,GAAG7D,GAAG,CAAC8D,MAAJ,CAAW7D,IAAX,EAAiB,UAAA+B,GAAG,EAAI;AACtC,MAAIA,GAAJ,EAAS;AACRE,qBAAOI,KAAP,kDAAuDN,GAAvD;;AACA9B,IAAAA,OAAO,CAAC6D,IAAR,CAAa,CAAb;AACA,GAHD,MAGO;AACN7B,qBAAOwB,IAAP,2CAA+CzD,IAA/C;AACA;AACD,CAPc,CAAf;AAUA,IAAM+D,UAAU,GAAGnE,UAAU,CAACgE,MAAD,EAAS;AACrCI,EAAAA,KAAK,EAAE,IAD8B;AAErCC,EAAAA,GAAG,EAAE;AACJC,IAAAA,GAAG,EAAEC,YAAGC,YAAH,CAAgB,aAAhB,EAA+B,MAA/B,CADD;AAEJC,IAAAA,IAAI,EAAEF,YAAGC,YAAH,CAAgB,cAAhB,EAAgC,MAAhC,CAFF;AAGJE,IAAAA,UAAU,EAAErE,OAAO,CAACC,GAAR,CAAYqE;AAHpB;AAFgC,CAAT,CAA7B;AASAxE,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiBkD,UAAjB;AAGAS,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["import \"@babel/polyfill\"\n\nimport dotenv from 'dotenv'\ndotenv.config({ silent: true })\n\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport path from 'path'\nimport jwt from 'express-jwt'\nimport blacklist from 'express-jwt-blacklist'\nimport mongoose from 'mongoose'\nimport requestLimiter from 'express-rate-limit'\nimport helmet from 'helmet'\nimport fs from 'fs'\n\nimport config from 'config'\nimport loggerMiddleware from './middlewares/logger'\nimport errorHandler from './middlewares/errorHandler'\nimport logger from './utils/logger'\n\nimport customer from './controllers/сustomer'\nimport company from './controllers/company'\nimport consultant from './controllers/consultant'\nimport consultation from './controllers/consultation'\nimport product from './controllers/product'\nimport representative from './controllers/representative'\nimport order from './controllers/order'\nimport certificate from './controllers/certificate'\n\n\nconst PeerServer = require('peer').ExpressPeerServer;\nconst api = express()\nconst port = process.env.PORT || config.get('api.port')\n\n\nconst limiter = requestLimiter({\n\twindowsMs: 15 * 60 * 1000,\n\tmax: 100\n})\nblacklist.configure({\n\tstore: {\n\t\ttype: 'redis',\n\t\thost: config.get('redis.host'),\n\t\tport: config.get('redis.port'),\n\t}\n})\n\napi.use((req, res, next) => {\n\tres.header('Access-Control-Allow-Origin', '*');\n\tnext();\n});\n\nconst enviroment = process.env.NODE_ENV || 'dev'\nif (enviroment === 'dev') api.enable('trust proxy')\n\napi.use(helmet())\napi.use(cors())\napi.use(bodyParser.urlencoded({ extended: true }))\napi.use(bodyParser.json())\napi.use(limiter)\n\napi.use(loggerMiddleware)\n\n\n// force jwt to work in production env only\nenviroment === 'production' && api.use(jwt({ secret: config.get('api.secret') }).unless(req =>\n\treq.originalUrl.match(/^((?!api).)*$/) ||\n\treq.originalUrl === '/api/customers' && req.method === 'POST' ||\n\treq.originalUrl === '/api/consultant' && req.method === 'POST' ||\n\treq.originalUrl === '/api/representative' && req.method === 'POST' ||\n\treq.originalUrl === '/api/customer/authenticate' ||\n\treq.originalUrl === '/api/consultant/authenticate' ||\n\treq.originalUrl === '/api/representative/authenticate'\n))\nenviroment === 'production' && api.use((err, req, res, next) => {\n\tif (err.name === 'UnauthorizedError') {\n\t\tlogger.warn(`[JWT] No authorization provided with request ${req.originalUrl}`)\n\t\tres.status(401).send({ error: `You have no permitions to make this request` })\n\t}\n})\n\napi.use('/api/', customer)\napi.use('/api/', product)\napi.use('/api/', company)\napi.use('/api/', consultant)\napi.use('/api/', consultation)\napi.use('/api/', representative)\napi.use('/api/', order)\napi.use('/api/', certificate)\napi.use(errorHandler)\n\napi.use(express.static(path.join(__dirname, '../public')))\napi.get('*', function (req, res) {\n\tres.sendFile(path.join(__dirname, '../public', 'index.html'));\n});\n\napi.all('*', (req, res) => {\n\tres.status(404).send({ error: `Path ${req.originalUrl} with method ${req.method} not found!` })\n})\n\nmongoose.connect(config.get('db.connectionString'), config.get('db.options')).then(\n\t() => logger.info(`[API] Connection to ${config.get('db.databaseName')} db was established `),\n\terr => logger.error(`[API] Error occured while connection to ${config.get('db.databaseName')} db: `, err)\n)\nmongoose.set('useCreateIndex', true)\nenviroment === 'dev' && mongoose.set('debug', (coll, method) => {\n\tlogger.info(`[Mongoose] Path: /${coll}, method: ${method}`)\n});\n\n\n\nconst server = api.listen(port, err => {\n\tif (err) {\n\t\tlogger.error(`[API] Error while launhing the server: ${err}`)\n\t\tprocess.exit(1)\n\t} else {\n\t\tlogger.info(`[API] Server is running on port ${port}`)\n\t}\n})\n\n\nconst peerServer = PeerServer(server, {\n\tdebug: true,\n\tssl: {\n\t\tkey: fs.readFileSync('ssl/key.pem', 'utf8'),\n\t\tcert: fs.readFileSync('ssl/cert.pem', 'utf8'),\n\t\tpassphrase: process.env.PASSPHRASE\n\t}\n});\n\napi.use('/p2p/', peerServer)\n\n\nmodule.exports = server"],"file":"server.js"}