{"version":3,"sources":["../server/server.js"],"names":["PeerServer","require","ExpressPeerServer","api","port","process","env","PORT","config","limiter","windowsMs","max","blacklist","configure","store","type","host","redis","use","req","res","next","header","enviroment","NODE_ENV","enable","bodyParser","urlencoded","extended","json","loggerMiddleware","secret","unless","originalUrl","match","method","err","name","logger","warn","status","send","error","customer","product","company","consultant","consultation","representative","order","certificate","errorHandler","express","static","path","join","__dirname","get","sendFile","all","mongoose","connect","db","connectionString","options","then","info","databaseName","set","coll","server","listen","exit","peerServer","debug","ssl","key","fs","readFileSync","cert","passphrase","PASSPHRASE","module","exports"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\"\r\n\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport path from 'path'\r\nimport jwt from 'express-jwt'\r\nimport blacklist from 'express-jwt-blacklist'\r\nimport mongoose from 'mongoose'\r\nimport requestLimiter from 'express-rate-limit'\r\nimport helmet from 'helmet'\r\nimport fs from 'fs'\r\n\r\nimport config from './config'\r\nimport loggerMiddleware from './middlewares/logger'\r\nimport errorHandler from './middlewares/errorHandler'\r\nimport logger from './utils/logger'\r\n\r\nimport customer from './controllers/сustomer'\r\nimport company from './controllers/company'\r\nimport consultant from './controllers/consultant'\r\nimport consultation from './controllers/consultation'\r\nimport product from './controllers/product'\r\nimport representative from './controllers/representative'\r\nimport order from './controllers/order'\r\nimport certificate from './controllers/certificate'\r\n\r\n\r\n\r\n\r\nconst PeerServer = require('peer').ExpressPeerServer;\r\nconst api = express()\r\nconst port = process.env.PORT || config.api.port\r\n\r\n// const ExpressPeerServer = require('peer').ExpressPeerServer;\r\n// const server = http.createServer(api)\r\n// const peerServer = ExpressPeerServer(server, {\r\n// \tdebug: true,\r\n// \tssl: {\r\n// \t\tkey: fs.readFileSync('./ssl/key.pem', 'utf8'),\r\n// \t\tcert: fs.readFileSync('./ssl/cert.pem', 'utf8'),\r\n// \t\tpassphrase: process.env.PASSPHRASE\r\n// \t}\r\n// })\r\n\r\n\r\nconst limiter = requestLimiter({\r\n\twindowsMs: 15 * 60 * 1000,\r\n\tmax: 100\r\n})\r\nblacklist.configure({\r\n\tstore: {\r\n\t\ttype: 'redis',\r\n\t\thost: config.redis.host,\r\n\t\tport: config.redis.port,\r\n\t}\r\n})\r\n\r\n// api.use('/p2p', peerServer)\r\napi.use((req, res, next) => {\r\n\tres.header('Access-Control-Allow-Origin', '*');\r\n\tnext();\r\n});\r\n\r\nconst enviroment = process.env.NODE_ENV || 'dev'\r\nif (enviroment === 'dev') api.enable('trust proxy')\r\n\r\napi.use(helmet())\r\napi.use(cors())\r\napi.use(bodyParser.urlencoded({ extended: true }))\r\napi.use(bodyParser.json())\r\napi.use(limiter)\r\n\r\napi.use(loggerMiddleware)\r\n\r\n\r\n\r\n// force jwt to work in production env only\r\nenviroment === 'prod' && api.use(jwt({ secret: config.api.secret }).unless(req =>\r\n\treq.originalUrl.match(/^((?!api).)*$/) ||\r\n\treq.originalUrl === '/api/customers' && req.method === 'POST' ||\r\n\treq.originalUrl === '/api/consultant' && req.method === 'POST' ||\r\n\treq.originalUrl === '/api/representative' && req.method === 'POST' ||\r\n\treq.originalUrl === '/api/customer/authenticate' ||\r\n\treq.originalUrl === '/api/consultant/authenticate' ||\r\n\treq.originalUrl === '/api/representative/authenticate'\r\n))\r\nenviroment === 'prod' && api.use((err, req, res, next) => {\r\n\tif (err.name === 'UnauthorizedError') {\r\n\t\tlogger.warn(`[JWT] No authorization provided with request ${req.originalUrl}`)\r\n\t\tres.status(401).send({ error: `You have no permitions to make this request` })\r\n\t}\r\n})\r\n\r\napi.use('/api/', customer)\r\napi.use('/api/', product)\r\napi.use('/api/', company)\r\napi.use('/api/', consultant)\r\napi.use('/api/', consultation)\r\napi.use('/api/', representative)\r\napi.use('/api/', order)\r\napi.use('/api/', certificate)\r\napi.use(errorHandler)\r\n\r\napi.use(express.static(path.join(__dirname, '../public')))\r\napi.get('*', function (req, res) {\r\n\tres.sendFile(path.join(__dirname, '../public', 'index.html'));\r\n});\r\n\r\napi.all('*', (req, res) => {\r\n\t// res.sendFile(path.resolve(__dirname, '../public', 'index.html'))\r\n\tres.status(404).send({ error: `Path ${req.originalUrl} with method ${req.method} not found!` })\r\n})\r\n\r\nmongoose.connect(config.db.connectionString, config.db.options).then(\r\n\t() => logger.info(`[API] Connection to ${config.db.databaseName} db was established `),\r\n\terr => logger.error(`[API] Error occured while connection to ${config.db.databaseName} db`, err)\r\n)\r\nmongoose.set('useCreateIndex', true)\r\nenviroment === 'dev' && mongoose.set('debug', (coll, method) => {\r\n\tlogger.info(`[Mongoose] Path: /${coll}, method: ${method}`)\r\n});\r\n\r\n\r\n\r\n// api.listen(port, err => {\r\nconst server = api.listen(port, err => {\r\n\tif (err) {\r\n\t\tlogger.error(`[API] Error while launhing the server: ${err}`)\r\n\t\tprocess.exit(1)\r\n\t} else {\r\n\t\tlogger.info(`[API] Server is running on port ${port}`)\r\n\t}\r\n})\r\n\r\n\r\nconst peerServer = PeerServer(server, {\r\n\tdebug: true,\r\n\tssl: {\r\n\t\tkey: fs.readFileSync('ssl/key.pem', 'utf8'),\r\n\t\tcert: fs.readFileSync('ssl/cert.pem', 'utf8'),\r\n\t\tpassphrase: process.env.PASSPHRASE\r\n\t}\r\n});\r\n\r\n\r\napi.use('/p2p/', peerServer)\r\n\r\n\r\n\r\nmodule.exports = server"],"file":"server.js"}