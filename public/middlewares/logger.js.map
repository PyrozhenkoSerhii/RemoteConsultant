{"version":3,"sources":["../../server/middlewares/logger.js"],"names":["shortid","characters","idCharacters","loggerMiddleware","req","res","next","id","generate","withBody","process","env","NODE_ENV","addJsonBody","logger","info","originalUrl","method","headers","JSON","stringify","body","onFinishedListener","clearListeners","statusCode","error","statusMessage","JsonBody","warn","errors","onClosedListener","onErrorListener","err","removeListener","on","oldEnd","end","bodyBuffer","rest","push","Buffer","from","parse","concat","toString","apply","e"],"mappings":"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","sourcesContent":["import shortid from 'shortid'\r\n\r\nimport logger from '../utils/logger'\r\nimport { idCharacters } from \"../utils/validation/regex\";\r\n\r\nshortid.characters(idCharacters)\r\n\r\n\r\nconst loggerMiddleware = (req, res, next) => {\r\n    const id = shortid.generate()\r\n    const withBody = process.env.NODE_ENV === 'dev'\r\n\r\n    addJsonBody(res)\r\n\r\n    if (withBody) {\r\n        logger.info(`[${id}] Request url:${req.originalUrl}, method:${req.method}, headers:${req.headers['user-agent']}, body:${JSON.stringify(req.body)}`)\r\n    } else {\r\n        logger.info(`[${id}] Request url:${req.originalUrl}, method:${req.method}, headers:${req.headers['user-agent']}`)\r\n    }\r\n\r\n    const onFinishedListener = () => {\r\n        clearListeners()\r\n        if (res.statusCode >= 500) {\r\n            logger.error(`[${id}] Request on url ${req.originalUrl} finished with status ` +\r\n                `${res.statusCode} ${res.statusMessage}, err: ${JSON.stringify(res.JsonBody.error || `Unknown error. See the server.logs`)}`)\r\n        }\r\n        else if (res.statusCode >= 400) {\r\n            logger.warn(`[${id}] Request on url ${req.originalUrl} finished with status ` +\r\n                `${res.statusCode} ${res.statusMessage}, err: ${JSON.stringify(res.JsonBody.error || res.JsonBody.errors)}`)\r\n        }\r\n        else {\r\n            logger.info(`[${id}] Request on url ${req.originalUrl} finished with status ${res.statusCode} ${res.statusMessage}`)\r\n        }\r\n        res.JsonBody = null\r\n    }\r\n\r\n    const onClosedListener = () => {\r\n        clearListeners()\r\n        logger.warn(`[${id}] Request on url ${req.originalUrl} was aborted by the client`)\r\n    }\r\n\r\n    const onErrorListener = err => {\r\n        clearListeners()\r\n        logger.error(`[${id}] Unexpected error occured during requst on url ${req.originalUrl}, error: ${JSON.stringify(err)}`)\r\n    }\r\n\r\n    const clearListeners = () => {\r\n        res.removeListener('finish', onFinishedListener)\r\n        res.removeListener('close', onClosedListener)\r\n        res.removeListener('error', onErrorListener)\r\n    }\r\n\r\n    res.on('finish', onFinishedListener)\r\n    res.on('close', onClosedListener)\r\n    res.on('error', onErrorListener)\r\n\r\n    next()\r\n}\r\n\r\nconst addJsonBody = res => {\r\n    const oldEnd = res.end\r\n\r\n    let bodyBuffer = []\r\n\r\n    res.end = (...rest) => {\r\n        try {\r\n            if (rest[0]) bodyBuffer.push(new Buffer.from(rest[0]))\r\n            res.JsonBody = JSON.parse(Buffer.concat(bodyBuffer).toString('utf8'))\r\n            oldEnd.apply(res, rest)\r\n        } catch (e) {\r\n            res.JsonBody = \"{error: 'Unexpected error occured due code'}\"\r\n            oldEnd.apply(res, rest)\r\n        }\r\n    }\r\n}\r\n\r\nexport default loggerMiddleware"],"file":"logger.js"}