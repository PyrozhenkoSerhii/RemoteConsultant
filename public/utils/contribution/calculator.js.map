{"version":3,"sources":["../../../server/utils/contribution/calculator.js"],"names":["exports","calculate","order","result","fetchData","engagedConsultants","total","consultations","sales","consultant","consultationsCount","salesCount","consultantEarned","totalEarned","points","isBest","output","max","isIdeator","scale","rating","input","min","competence","friendliness","consultantions","username","Math","floor","logger","log","product","customer","JSON","stringify","productTitle","customerUsername","bestUsername","relevantConsultationsPromise","Consultation","find","ordersPromise","Order","relevantConsultations","tempConsulultantsName","ideatorUsername","item","push","survey","alternative","consultantsStatisticPromise","Consultant","$in","select","consultationsCountPromise","aggregate","$match","$group","count","$sum","orders","consultantConsultations","consultation","consultantsStatistic","value","inMin","inMax","outMin","outMax"],"mappings":"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","sourcesContent":["import _forEach from 'lodash/forEach'\r\nimport _map from 'lodash/map'\r\nimport _find from 'lodash/find'\r\nimport _assign from 'lodash/assign'\r\nimport _isUndefined from 'lodash/isUndefined'\r\nimport _sort from 'lodash/sortBy'\r\nimport _reduce from 'lodash/reduce'\r\n\r\nimport Consultant from '../../models/Consultant'\r\nimport Consultation from '../../models/Consultation'\r\nimport Order from '../../models/Order'\r\nimport logger from '../logger';\r\nimport { default as input } from '../validation/range'\r\nimport { default as output } from './coefficients'\r\n\r\n\r\n/**\r\n * Function is called after an order was submitted\r\n * It returns a consultants contributions (in percentage)\r\n */\r\nexports.calculate = async (order) => {\r\n\tconst result = {}\r\n\r\n\tconst engagedConsultants = await fetchData(order)\r\n\r\n\tconst total = { consultations: 0, sales: 0 }\r\n\t_forEach(engagedConsultants, consultant => {\r\n\t\ttotal.consultations += consultant.consultationsCount\r\n\t\ttotal.sales += consultant.salesCount\r\n\t})\r\n\r\n\tconst consultantEarned = {}\r\n\tlet totalEarned = 0\r\n\t_forEach(engagedConsultants, consultant => {\r\n\t\tlet points = 0\r\n\r\n\t\tif (consultant.isBest) points += output.isBest.max /* if best consultant*/\r\n\t\tif (consultant.isIdeator) points += output.isIdeator.max /* if suggested product */\r\n\r\n\t\tpoints += scale(consultant.rating, input.rating.min, input.rating.max, output.rating.min, output.rating.max) /* rating */\r\n\t\tpoints += scale(consultant.competence, input.competence.min, input.competence.max, output.competence.min, output.competence.max) /* competence */\r\n\t\tpoints += scale(consultant.friendliness, input.friendliness.min, input.friendliness.max, output.friendliness.min, output.friendliness.max) /* friendliness*/\r\n\t\tpoints += scale(consultant.consultationsCount, 0, total.consultations, output.consultantions.min, output.consultantions.max) /*  consultations ratio */\r\n\t\tpoints += scale(consultant.salesCount, 0, total.sales, output.sales.min, output.sales.max) /* sales ratio */\r\n\r\n\t\tconsultantEarned[consultant.username] = points\r\n\t\ttotalEarned += points\r\n\t})\r\n\r\n\t_map(engagedConsultants, consultant => {\r\n\t\tresult[consultant.username] = Math.floor((consultantEarned[consultant.username] / totalEarned) * 100)\r\n\t})\r\n\r\n\tlogger.log(`Consultants contribution after saling of '${order.product}' for user '${order.customer}': \\n ${JSON.stringify(result)}`)\r\n\r\n\treturn result\r\n}\r\n\r\n\r\n/**\r\n * Function to prepare a data to contribution calculation\r\n * It returns an array of consultants with all the data required for calculation\r\n */\r\nconst fetchData = async (order) => {\r\n\tconst { product: productTitle, customer: customerUsername, consultant: bestUsername } = order\r\n\r\n\tconst relevantConsultationsPromise = Consultation.find({ customer: customerUsername, product: productTitle })\r\n\tconst ordersPromise = Order.find({})\r\n\r\n\tconst relevantConsultations = await relevantConsultationsPromise\r\n\r\n\t/**\r\n\t * get consultants who provided a consultation to customer\r\n\t * if the ordered product inside 'alternative' field it means that this consultant suggested to buy it \r\n\t */\r\n\tconst engagedConsultants = []\r\n\tconst tempConsulultantsName = []\r\n\tconst ideatorUsername = ''\r\n\t_forEach(relevantConsultations, item => {\r\n\t\tengagedConsultants.push({ username: item.consultant, ...item.survey })\r\n\t\ttempConsulultantsName.push(item.consultant)\r\n\t\tif (item.alternative === productTitle) ideatorUsername = item.username\r\n\t})\r\n\r\n\t/**\r\n\t * get all required info about envolved consultants\r\n\t */\r\n\tconst consultantsStatisticPromise = Consultant.find({ username: { $in: tempConsulultantsName } })\r\n\t\t.select({ \"id\": 0, \"username\": 1, \"rating\": 1 })\r\n\r\n\tconst consultationsCountPromise = Consultation.aggregate([\r\n\t\t{ $match: { consultant: { $in: tempConsulultantsName } } },\r\n\t\t{ $group: { username: '$consultant', count: { $sum: 1 } } }\r\n\t])\r\n\r\n\tconst orders = await ordersPromise\r\n\tconst consultantConsultations = await Consultation.find({ consultant: { $in: tempConsulultantsName } })\r\n\t\t.select({ \"id\": 0, \"customer\": 1, \"product\": 1, \"consultant\": 1 })\r\n\r\n\tconst salesCount = {}\r\n\t_forEach(orders, order => {\r\n\t\t_forEach(consultantConsultations, consultation => {\r\n\t\t\tif (order.customer === consultation.customer && order.product === consultation.product)\r\n\t\t\t\tsalesCount[order.consultant] = _isUndefined(salesCount[order.consultant]) ? 1 : ++salesCount[order.consultant]\r\n\t\t})\r\n\t})\r\n\r\n\tconst consultantsStatistic = await consultantsStatisticPromise\r\n\tconst consultationsCount = await consultationsCountPromise\r\n\r\n\t/**\r\n\t * merge consultant statistic and assessment from customer\r\n\t * check if consultant suggested an alternative product which was bought\r\n\t * check if consultant was selected as one who convinced customer to buy a product \r\n\t * result object fields: {username, rating, competence, friendliness, note, consultationsCount, salesCount, isbest, isideator}\r\n\t *  */\r\n\t_map(engagedConsultants, item => {\r\n\t\t_assign(item, _find(consultantsStatistic, { username: item.username }))\r\n\t\titem['consultationsCount'] = consultationsCount[item.username].count\r\n\t\titem['salesCount'] = salesCount[item.username]\r\n\t\titem['isBest'] = item.username === bestUsername\r\n\t\titem['isIdeator'] = item.username === ideatorUsername\r\n\t\treturn item\r\n\t})\r\n\r\n\treturn engagedConsultants\r\n}\r\n\r\n\r\n/**\r\n * Function to transform input value to defined range\r\n * @param {number} value The value to transform\r\n * @param {number} inMin Min input value\r\n * @param {number} inMax Max input value\r\n * @param {number} outMin Lower bound of output range\r\n * @param {number} outMax Upper bound of output range\r\n */\r\nconst scale = (value, inMin, inMax, outMin, outMax) => (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\r\n\r\n"],"file":"calculator.js"}