{"version":3,"sources":["../../server/utils/jwt.js"],"names":["exports","sign","user","logger","info","username","jwt","toJSON","config","get","expiresIn","verify","token","err","decoded","warn","JSON","stringify","name"],"mappings":";;AAAA;;AACA;;AACA;;;;AAGAA,OAAO,CAACC,IAAR,GAAe,UAAAC,IAAI,EAAI;AACnBC,kBAAOC,IAAP,uBAA2BF,IAAI,CAACG,QAAhC;;AAEA,SAAOC,sBAAIL,IAAJ,CACHC,IAAI,CAACK,MAAL,EADG,EAEHC,gBAAOC,GAAP,CAAW,YAAX,CAFG,EAGH;AACIC,IAAAA,SAAS,EAAE;AADf,GAHG,CAAP;AAMH,CATD;;AAYAV,OAAO,CAACW,MAAR,GAAiB,UAAAC,KAAK,EAAI;AACtBN,wBAAIK,MAAJ,CAAWC,KAAX,EAAkBJ,gBAAOC,GAAP,CAAW,QAAX,CAAlB,EAAwC,UAACI,GAAD,EAAMC,OAAN,EAAkB;AACtD,QAAID,GAAJ,EAAS;AACLV,sBAAOY,IAAP,yCAA6CC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,CAA7C;;AACA,aAAO,KAAP;AACH;;AAED,QAAIJ,OAAJ,EAAa;AACTX,sBAAOC,IAAP;;AACA,aAAO,IAAP;AACH;AACJ,GAVD;AAWH,CAZD","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport config from 'config'\r\nimport logger from './logger'\r\n\r\n\r\nexports.sign = user => {\r\n    logger.info(`[JWT] User -${user.username}- was signed`)\r\n\r\n    return jwt.sign(\r\n        user.toJSON(),\r\n        config.get('api.secret'),\r\n        {\r\n            expiresIn: '24h'\r\n        })\r\n}\r\n\r\n\r\nexports.verify = token => {\r\n    jwt.verify(token, config.get('secret'), (err, decoded) => {\r\n        if (err) {\r\n            logger.warn(`[JWT] Token isn't valid, err: ${JSON.stringify(err.name)}`)\r\n            return false\r\n        }\r\n\r\n        if (decoded) {\r\n            logger.info(`[JWT] Token was verified`)\r\n            return true\r\n        }\r\n    })\r\n}\r\n"],"file":"jwt.js"}